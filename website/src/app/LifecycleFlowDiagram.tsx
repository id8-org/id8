import React, { useCallback, useMemo, useState, useEffect } from 'react';
import ReactFlow, {
  Background,
  Controls,
  MiniMap,
  Node,
  MarkerType,
} from 'reactflow';
import 'reactflow/dist/style.css';

// Node descriptions and user actions for each stage
const NODE_DESCRIPTIONS: Record<string, { label: string; description: string; actions: string[]; flow: string }> = {
  system: {
    label: 'System Generated',
    description: 'Ideas generated automatically from trending GitHub repos and system context. User can review, shortlist, or deep dive.',
    actions: ['Review', 'Shortlist', 'Deep Dive'],
    flow: 'Entry',
  },
  ai: {
    label: 'AI Generated',
    description: 'Ideas generated by the AI using user profile, onboarding, and repo context. User can review, shortlist, or deep dive.',
    actions: ['Review', 'Shortlist', 'Deep Dive'],
    flow: 'Entry',
  },
  byoi: {
    label: 'Bring Your Own Idea',
    description: 'User-submitted ideas. User can validate, edit, or deep dive their own idea.',
    actions: ['Validate', 'Edit', 'Deep Dive'],
    flow: 'Entry',
  },
  deep_dive: {
    label: 'Deep Dive',
    description: 'Convergence point: All ideas (system, AI, BYOI) can be deep-dived. LLM analyzes the idea and user context. User can review analysis, restore versions, or move to iteration.',
    actions: ['Review Deep Dive', 'Restore Version', 'Iterate'],
    flow: 'Unified',
  },
  iterating: {
    label: 'Iterating',
    description: 'Run multiple LLM analyses (investor lens, customer lens, VC thesis, investor deck). User can review outputs and move forward.',
    actions: ['Review Outputs', 'Consider', 'Close'],
    flow: 'Unified',
  },
  considering: {
    label: 'Considering',
    description: 'Final LLM analyses and go/no-go decision. User can close the idea or commit to build.',
    actions: ['Go/No-Go', 'Close', 'Commit to Build'],
    flow: 'Unified',
  },
  closed: {
    label: 'Closed',
    description: 'Terminal state. Optionally run post-mortem analysis. User can review learnings or start a new idea.',
    actions: ['Review Learnings', 'Clone', 'Start New Idea'],
    flow: 'Unified',
  },
};

interface StageInputOutput {
  label: string;
  field: string;
  prompt_var?: string;
}
interface Stage {
  stage: string;
  inputs: StageInputOutput[];
  outputs: StageInputOutput[];
  prompt?: string;
  description?: string;
  api_route?: string;
  db_tables?: string[];
  ui_trigger?: string;
}

interface LifecycleFlowDiagramProps {
  stages: Stage[];
  promptTexts: Record<string, string>;
  actualData: Record<string, { example: Record<string, unknown> }>;
}

// Modal for drill-down (now includes phase, prompt key, full prompt, input/output mapping)
function StageModal({ open, onClose, nodeKey, stage, data, promptText: initialPromptText }: { open: boolean; onClose: () => void; nodeKey: string; stage?: Stage; data?: Record<string, unknown>; promptText?: string }) {
  const nodeInfo = NODE_DESCRIPTIONS[nodeKey] || { label: nodeKey, description: '', actions: [], flow: '' };
  const promptKey = stage?.prompt ? (stage.prompt.split(',')[0].trim()) : undefined;
  const [promptText, setPromptText] = useState<string | undefined>(initialPromptText);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    let ignore = false;
    if (promptKey) {
      setLoading(true);
      setError(null);
      fetch(`/api/prompts/${promptKey}`)
        .then(res => res.json())
        .then(json => {
          if (!ignore) {
            if (json.prompt) {
              setPromptText(json.prompt);
            } else {
              setPromptText(undefined);
              setError(json.error || 'Prompt not found');
            }
            setLoading(false);
          }
        })
        .catch(() => {
          if (!ignore) {
            setError('Failed to load prompt');
            setLoading(false);
          }
        });
    } else {
      setPromptText(undefined);
    }
    return () => { ignore = true; };
  }, [promptKey]);

  if (!open) return null;
  return (
    <div className="fixed inset-0 bg-black bg-opacity-40 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg shadow-xl max-w-2xl w-full p-6 relative">
        <button className="absolute top-2 right-2 text-gray-500 hover:text-gray-900" onClick={onClose}>âœ•</button>
        <h2 className="text-xl font-bold mb-2">{nodeInfo.label} Details</h2>
        <div className="mb-2 text-sm text-gray-700">{nodeInfo.description}</div>
        <div className="mb-2 text-xs text-gray-500">Flow: {nodeInfo.flow}</div>
        {stage && (
          <div className="mb-4">
            <div className="mb-2 text-sm font-bold text-blue-900">Phase: {stage.stage}</div>
            <div className="mb-2 text-xs text-gray-700">Prompt Key: <span className="font-mono bg-gray-100 px-2 py-0.5 rounded">{promptKey || 'None'}</span></div>
            <div className="mb-2 text-base text-gray-800 bg-blue-50 border-l-4 border-blue-400 p-3 rounded">
              {stage.description || nodeInfo.description || 'No description available for this phase.'}
            </div>
          </div>
        )}
        <div className="mb-4">
          <h3 className="font-bold text-purple-800 mb-1">Prompt</h3>
          {loading && <div className="text-xs text-gray-400">Loading prompt...</div>}
          {error && <div className="text-xs text-red-700 font-semibold">{error}</div>}
          {!loading && !error && promptText && (
            <pre className="bg-white border border-purple-700 text-purple-900 font-mono p-2 text-xs text-purple-900 whitespace-pre-wrap overflow-x-auto">{promptText}</pre>
          )}
          {!loading && !error && !promptText && <div className="text-xs text-gray-400">No prompt used for this phase.</div>}
        </div>
        {stage && (
          <>
            <div className="mb-4">
              <h3 className="font-bold text-blue-800 mb-1">Inputs</h3>
              <table className="w-full text-xs border border-blue-700 text-blue-900 rounded mb-2">
                <thead>
                  <tr className="bg-blue-700 text-white">
                    <th className="text-left px-2 py-1 font-bold text-blue-900">UI Label</th>
                    <th className="text-left px-2 py-1 font-bold text-blue-900">Backend Field</th>
                    <th className="text-left px-2 py-1 font-bold text-blue-900">Prompt Var</th>
                  </tr>
                </thead>
                <tbody>
                  {stage.inputs.map((input, i) => (
                    <tr key={i} className="border-t border-blue-100">
                      <td className="px-2 py-1 text-blue-900 font-medium">{input.label}</td>
                      <td className="px-2 py-1 text-blue-900">{input.field}</td>
                      <td className="px-2 py-1 text-blue-900">{input.prompt_var || '-'}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
            <div className="mb-4">
              <h3 className="font-bold text-green-800 mb-1">Outputs</h3>
              <table className="w-full text-xs border border-green-700 text-green-900 rounded mb-2">
                <thead>
                  <tr className="bg-green-700 text-white">
                    <th className="text-left px-2 py-1 font-bold text-green-900">UI Label</th>
                    <th className="text-left px-2 py-1 font-bold text-green-900">Backend Field</th>
                    <th className="text-left px-2 py-1 font-bold text-green-900">Prompt Var</th>
                  </tr>
                </thead>
                <tbody>
                  {stage.outputs.map((output, i) => (
                    <tr key={i} className="border-t border-green-100">
                      <td className="px-2 py-1 text-green-900 font-medium">{output.label}</td>
                      <td className="px-2 py-1 text-green-900">{output.field}</td>
                      <td className="px-2 py-1 text-green-900">{output.prompt_var || '-'}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
            {stage && data && (
              <div className="mb-4">
                <h3 className="font-bold text-gray-900 mb-1">Example / Actual Values</h3>
                <table className="w-full text-xs border border-gray-400 rounded mb-2 bg-white">
                  <thead>
                    <tr className="bg-gray-700 text-white">
                      <th className="text-left px-2 py-1 font-bold">Field</th>
                      <th className="text-left px-2 py-1 font-bold">Value</th>
                    </tr>
                  </thead>
                  <tbody>
                    {Object.entries(data).map(([key, value]) => (
                      <tr key={key} className="border-t border-gray-100">
                        <td className="px-2 py-1 font-medium">{key}</td>
                        <td className="px-2 py-1">
                          {typeof value === 'number' ? (
                            <span className="inline-flex items-center gap-1 font-bold">
                              <span className={`inline-block w-3 h-3 rounded-full ${value <= 3 ? 'bg-red-500' : value <= 7 ? 'bg-yellow-400' : 'bg-green-500'}`}></span>
                              {value}
                            </span>
                          ) : (
                            String(value)
                          )}
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
                <div className="text-xs mt-1 flex gap-4 items-center">
                  <span className="inline-flex items-center gap-1"><span className="w-3 h-3 rounded-full bg-red-500 inline-block"></span>Low (1-3)</span>
                  <span className="inline-flex items-center gap-1"><span className="w-3 h-3 rounded-full bg-yellow-400 inline-block"></span>Medium (4-7)</span>
                  <span className="inline-flex items-center gap-1"><span className="w-3 h-3 rounded-full bg-green-500 inline-block"></span>High (8-10)</span>
                </div>
              </div>
            )}
          </>
        )}
        <div className="mb-4">
          <h3 className="font-bold text-blue-800 mb-1">User Actions</h3>
          <ul className="list-disc ml-6 text-xs text-blue-900 font-semibold">
            {nodeInfo.actions.map((action, i) => <li key={i}>{action}</li>)}
          </ul>
        </div>
      </div>
    </div>
  );
}

export default function LifecycleFlowDiagram({ stages, promptTexts, actualData }: LifecycleFlowDiagramProps) {
  // State for modal
  const [selectedNode, setSelectedNode] = useState<string | null>(null);
  const [modalOpen, setModalOpen] = useState(false);

  // Node layout: three entry nodes, all converge at deep_dive, then linear
  const { nodes, edges } = useMemo(() => {
    const nodeOrder = ['system', 'ai', 'byoi', 'deep_dive', 'iterating', 'considering', 'closed'];
    const nodePositions: Record<string, { x: number; y: number }> = {
      system: { x: 0, y: 0 },
      ai: { x: 0, y: 180 },
      byoi: { x: 0, y: 360 },
      deep_dive: { x: 350, y: 180 },
      iterating: { x: 700, y: 180 },
      considering: { x: 1050, y: 180 },
      closed: { x: 1400, y: 180 },
    };

    // Build nodes for React Flow
    const nodes = nodeOrder.map((key) => ({
      id: key,
      type: 'default',
      data: { label: NODE_DESCRIPTIONS[key]?.label || key },
      position: nodePositions[key],
      style: {
        minWidth: 180,
        minHeight: 60,
        background: key === 'deep_dive' ? '#fef9c3' : key === 'system' ? '#dbeafe' : key === 'ai' ? '#ede9fe' : key === 'byoi' ? '#fef3c7' : '#f0f6ff',
        border: '2px solid #2563eb',
        borderRadius: 12,
        cursor: 'pointer',
        fontWeight: 600,
        fontSize: 16,
        color: '#1e293b',
      },
    }));

    // Build edges for React Flow
    const edges = [
      // Entry flows to deep dive
      { id: 'e-system-deep', source: 'system', target: 'deep_dive', animated: true, style: { stroke: '#2563eb', strokeWidth: 2 }, markerEnd: { type: MarkerType.ArrowClosed, color: '#2563eb' } },
      { id: 'e-ai-deep', source: 'ai', target: 'deep_dive', animated: true, style: { stroke: '#a21caf', strokeWidth: 2 }, markerEnd: { type: MarkerType.ArrowClosed, color: '#a21caf' } },
      { id: 'e-byoi-deep', source: 'byoi', target: 'deep_dive', animated: true, style: { stroke: '#f59e42', strokeWidth: 2 }, markerEnd: { type: MarkerType.ArrowClosed, color: '#f59e42' } },
      // Unified flow
      { id: 'e-deep-iter', source: 'deep_dive', target: 'iterating', animated: true, style: { stroke: '#2563eb', strokeWidth: 2 }, markerEnd: { type: MarkerType.ArrowClosed, color: '#2563eb' } },
      { id: 'e-iter-cons', source: 'iterating', target: 'considering', animated: true, style: { stroke: '#2563eb', strokeWidth: 2 }, markerEnd: { type: MarkerType.ArrowClosed, color: '#2563eb' } },
      { id: 'e-cons-closed', source: 'considering', target: 'closed', animated: true, style: { stroke: '#2563eb', strokeWidth: 2 }, markerEnd: { type: MarkerType.ArrowClosed, color: '#2563eb' } },
    ];

    return { nodes, edges };
  }, []);

  // Node click handler
  const onNodeClick = useCallback((event: React.MouseEvent, node: Node) => {
    setSelectedNode(node.id);
    setModalOpen(true);
  }, []);

  // Modal close handler
  const closeModal = () => {
    setModalOpen(false);
    setSelectedNode(null);
  };

  // Find the stage for a node (if any)
  const getStageForNode = (nodeKey: string): Stage | undefined => stages.find(s => s.stage === nodeKey);

  // Get prompt text for a node (if any)
  const getPromptTextForNode = (nodeKey: string, stage?: Stage) => {
    if (!stage) return undefined;
    return promptTexts[(stage.prompt || '').split(',')[0].trim()] || '(Prompt text not found)';
  };

  // Add getDataForNode helper:
  const getDataForNode = (nodeKey: string, stage?: Stage) => {
    if (!stage) return undefined;
    return actualData[stage.stage]?.example ?? undefined;
  };

  return (
    <div className="w-full h-[600px] relative">
      {/* Legend/Explainer Panel */}
      <div className="absolute left-0 top-0 z-10 bg-white bg-opacity-90 rounded shadow p-4 m-4 max-w-xl border border-blue-200">
        <h3 className="font-bold text-lg mb-2 text-blue-900">Lifecycle Flow Explainer</h3>
        <div className="mb-2 text-sm text-gray-700">
          <span className="font-bold">Three entry points:</span> <span className="text-blue-800">System Generated</span>, <span className="text-purple-800">AI Generated</span>, <span className="text-yellow-800">Bring Your Own Idea</span>.<br />
          All converge at <span className="text-yellow-700 font-bold">Deep Dive</span>, after which the flow is unified: <span className="text-blue-800">Iterating</span> â†’ <span className="text-blue-800">Considering</span> â†’ <span className="text-blue-800">Closed</span>.<br />
          Click any node to see its full description, user actions, and data flow.
        </div>
      </div>
      <ReactFlow
        nodes={nodes}
        edges={edges}
        onNodeClick={onNodeClick}
        fitView
        panOnScroll
        zoomOnScroll
        nodesDraggable={false}
        nodesConnectable={false}
        className="bg-blue-50 rounded-xl border border-blue-200"
      >
        <MiniMap />
        <Controls />
        <Background gap={16} color="#e0e7ef" />
      </ReactFlow>
      {selectedNode && (
        <StageModal
          open={modalOpen}
          onClose={closeModal}
          nodeKey={selectedNode}
          stage={getStageForNode(selectedNode)}
          data={getDataForNode(selectedNode, getStageForNode(selectedNode))}
          promptText={getPromptTextForNode(selectedNode, getStageForNode(selectedNode))}
        />
      )}
    </div>
  );
} 